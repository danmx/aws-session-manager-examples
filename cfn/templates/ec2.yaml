---
AWSTemplateFormatVersion: '2010-09-09'
Description: This template is intended to be deployed into an existing VPC with two
  subnets. It will create an auto-scaling group of Linux Instance instances. **WARNING** This template creates Amazon EC2 instance
  and related resources. You will be billed for the AWS resources used if you create
  a stack from this template. QS(0037)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VPC
      - SubnetID
      - PrivateSubnet
    - Label:
        default: Amazon EC2 Configuration
      Parameters:
      - KeyPairName
      - InstanceAMIOS
      - InstanceInstanceType
      - RootVolumeSize
      - NameTag
    - Label:
        default: Linux Instance Configuration
      Parameters:
      - NumInstanceHosts
      - InstanceTenancy
    ParameterLabels:
      InstanceAMIOS:
        default: Instance AMI Operating System
      InstanceTenancy:
        default: Instance Tenancy
      InstanceInstanceType:
        default: Instance Instance Type
      KeyPairName:
        default: Key Pair Name
      NumInstanceHosts:
        default: Number of Instance Hosts
      SubnetID:
        default: Subnet ID
      VPC:
        default: VPC ID
      RootVolumeSize:
        default: Root Volume Size
      NameTag:
        default: Instance Name
      PrivateSubnet:
        default: Describes if given subnet is private
Parameters:
  InstanceAMIOS:
    AllowedValues:
    - Amazon-Linux-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the Instance instances
    Type: String
  InstanceTenancy:
    Description: 'VPC Tenancy to launch the Instance in. Options: ''dedicated'' or
      ''default'''
    Type: String
    Default: default
    AllowedValues:
    - dedicated
    - default
  InstanceInstanceType:
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    Default: t2.micro
    Description: Amazon EC2 instance type for the Instance instances
    Type: String
  KeyPairName:
    Description: Enter a Public/private key pair. If you do not have one in this region,
      please create it before continuing
    Type: AWS::EC2::KeyPair::KeyName
  NumInstanceHosts:
    AllowedValues:
    - '1'
    - '2'
    - '3'
    - '4'
    Default: '1'
    Description: Enter the number of Instance hosts to create
    Type: String
  SubnetID:
    Description: ID of the public subnet that you want to provision the first Instance
      into (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  VPC:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  OSImageOverride:
    Description: Specify a region specific image to use for the instance
    Type: String
    Default: ''
  AlternativeIAMRole:
    Description: specify an existing IAM Role name to attach to the Instance, if left
      blank a new role will be created.
    Default: ''
    Type: String
  RootVolumeSize:
    Description: Specify a size in GB for the root EBS volume
    Type: Number
    Default: '10'
  NameTag:
    Description: Instance Name
    Type: String
    Default: LinuxInstance
  PrivateSubnet:
    Description: Describes if given subnet is private
    Type: String
    Default: 'false'
Rules:
  SubnetsInVPC:
    Assertions:
    - Assert:
        Fn::EachMemberIn:
        - Fn::ValueOfAll:
          - AWS::EC2::Subnet::Id
          - VpcId
        - Fn::RefAll: AWS::EC2::VPC::Id
      AssertDescription: All subnets must exist in the VPC
Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZN2HVMX8664: amzn2-ami-hvm-2.0-x86_64-gp2
    eu-west-1:
      AMZN2HVMX8664: ami-030dbca661d402413
  LinuxAMINameMap:
    Amazon-Linux-HVM:
      Code: AMZN2HVMX8664
Conditions:
  CreateIAMRole:
    Fn::Equals:
    - Ref: AlternativeIAMRole
    - ''
  UseOSImageOverride:
    Fn::Not:
    - Fn::Equals:
      - Ref: OSImageOverride
      - ''
  PrivateSubnetsCondition:
    Fn::Equals:
    - Ref: PrivateSubnet
    - 'true'
Resources:
  InstanceHostRole:
    Condition: CreateIAMRole
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Principal:
            Service:
            - ec2.amazonaws.com
          Effect: Allow
        Version: '2012-10-17'
      Policies:
      - PolicyName: AccessToVPCEndpoints
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: ec2:*VpcEndpoint*
            Resource: "*"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  InstanceHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Fn::If:
        - CreateIAMRole
        - Ref: InstanceHostRole
        - Ref: AlternativeIAMRole
      Path: "/"
  InstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        Ref: InstanceLaunchConfiguration
      VPCZoneIdentifier:
      - Ref: SubnetID
      MinSize:
        Ref: NumInstanceHosts
      MaxSize:
        Ref: NumInstanceHosts
      Cooldown: '300'
      DesiredCapacity:
        Ref: NumInstanceHosts
      Tags:
      - Key: Name
        Value: !Ref NameTag
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count:
          Ref: NumInstanceHosts
        Timeout: PT30M
  InstanceLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      PlacementTenancy:
        Ref: InstanceTenancy
      KeyName:
        Ref: KeyPairName
      IamInstanceProfile:
        Ref: InstanceHostProfile
      ImageId:
        Fn::If:
        - UseOSImageOverride
        - Ref: OSImageOverride
        - Fn::FindInMap:
          - AWSAMIRegionMap
          - Ref: AWS::Region
          - Fn::FindInMap:
            - LinuxAMINameMap
            - Ref: InstanceAMIOS
            - Code
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType:
        Ref: InstanceInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize:
            Ref: RootVolumeSize
          VolumeType: gp2
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -o xtrace
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack ${AWS::StackName} \
                     --resource InstanceAutoScalingGroup  \
                     --region ${AWS::Region}
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: PrivateSubnetsCondition
    Properties:
      GroupDescription: Enables access to VPC Endpoints
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId:
          Ref: InstanceSecurityGroup
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables access to VPC Endpoints
      VpcId:
        Ref: VPC
#      SecurityGroupIngress:
#      - IpProtocol: tcp
#        FromPort: 22
#        ToPort: 22
#        CidrIp:
#          Ref: RemoteAccessCIDR
#      - IpProtocol: icmp
#        FromPort: -1
#        ToPort: -1
#        CidrIp:
#          Ref: RemoteAccessCIDR
  EC2VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: PrivateSubnetsCondition
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SubnetIds:
      - Ref: SubnetID
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ec2
      VpcId:
        Ref: VPC
      SecurityGroupIds:
      - Ref: VPCEndpointSecurityGroup
  EC2MsgVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: PrivateSubnetsCondition
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SubnetIds:
      - Ref: SubnetID
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ec2messages
      VpcId:
        Ref: VPC
      SecurityGroupIds:
      - Ref: VPCEndpointSecurityGroup
  SSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: PrivateSubnetsCondition
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SubnetIds:
      - Ref: SubnetID
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ssm
      VpcId:
        Ref: VPC
      SecurityGroupIds:
      - Ref: VPCEndpointSecurityGroup
  SSMMsgVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: PrivateSubnetsCondition
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SubnetIds:
      - Ref: SubnetID
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ssmmessages
      VpcId:
        Ref: VPC
      SecurityGroupIds:
      - Ref: VPCEndpointSecurityGroup
  CFNVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: PrivateSubnetsCondition
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SubnetIds:
      - Ref: SubnetID
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.cloudformation
      VpcId:
        Ref: VPC
      SecurityGroupIds:
      - Ref: VPCEndpointSecurityGroup
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 1
Outputs:
  InstanceAutoScalingGroup:
    Description: Auto Scaling Group Reference ID
    Value:
      Ref: InstanceAutoScalingGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-InstanceAutoScalingGroup"
  InstanceSecurityGroupID:
    Description: Instance Security Group ID
    Value:
      Ref: InstanceSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-InstanceSecurityGroupID"
  CloudWatchLogsGroup:
    Description: CloudWatch Logs Group
    Value:
      Ref: CloudWatchLogsGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-CloudWatchLogsGroup"
  InstanceHostRole:
    Description: Instance IAM Role name
    Value:
      Fn::If:
      - CreateIAMRole
      - Ref: InstanceHostRole
      - Ref: AlternativeIAMRole
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-InstanceHostRole"
